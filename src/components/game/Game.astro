---
import ArrowBox from "./ArrowBox.astro";
import TargetBox from "./TargetBox.astro";
import Character from "./Character.astro";

// Generate 10 random arrows
const arrows = ["up", "down", "left", "right"] as const;
const randomArrows = Array.from({ length: 10 }, (_, index) => ({
  direction: arrows[Math.floor(Math.random() * arrows.length)],
  class: `game__arrow-box game__arrow-box--${index + 1}`,
}));
---

<div class="game" data-arrows={randomArrows}>
  <div class="game__score">
    <p>
      Score: <span data-score="hero">0</span> / <span data-score="boss">0</span>
    </p>
  </div>
  <div class="game__battleground">
    <Character type="hero" />
    <Character type="boss" />
  </div>
  <div class="game__Arrow-Container">
    <TargetBox>
      {
        randomArrows.map(({ direction, class: className }) => (
          <ArrowBox arrow={direction} class={className} />
        ))
      }
    </TargetBox>
  </div>
  <div style={{ display: "flex", gap: "1rem", padding: "1rem" }}>
    <button class="game__button--start">Start</button>
    <button class="game__button--measure">Measure</button>
    <button class="game__button--reset">Reset</button>
  </div>
</div>

<script>
  import { loadAllSounds, playSound } from "../../utils/soundUtils";
  import { measureDistance } from "../../utils/measureDistance.ts";

  const hero = document.querySelector(".character--hero");
  const boss = document.querySelector(".character--boss");

  loadAllSounds();

  // Game state
  const gameState = {
    step: 1,
    heroScore: 0,
    bossScore: 0,
  };

  // Get arrow sequence
  const getArrowSequence = () => {
    const gameArrows = document.querySelectorAll(".arrow-box__arrow");
    return Array.from(gameArrows)
      .map((arrow) => {
        const className = arrow.className;
        if (className.includes("left")) return "ArrowLeft";
        if (className.includes("up")) return "ArrowUp";
        if (className.includes("down")) return "ArrowDown";
        if (className.includes("right")) return "ArrowRight";
        return null;
      })
      .filter((direction) => direction !== null);
  };

  const randomArrows = getArrowSequence();

  // Handle key press
  const handleKeyPress = (event: KeyboardEvent) => {
    event.preventDefault();

    const validKeys = ["ArrowLeft", "ArrowUp", "ArrowDown", "ArrowRight"];
    if (!validKeys.includes(event.key)) {
      playSound("click");
      return;
    }

    if (gameState.step > randomArrows.length) return;

    const currentArrow = randomArrows[gameState.step - 1];
    const currentArrowBox = document.querySelector(
      `.game__arrow-box--${gameState.step}`,
    );
    if (!currentArrowBox) return;

    const isCorrectKey = event.key.toLowerCase() === currentArrow.toLowerCase();
    const distance = measureDistance(
      ".target-box",
      `.game__arrow-box--${gameState.step}`,
    );

    if (isCorrectKey && distance && distance >= -20 && distance <= 20) {
      currentArrowBox.classList.add("arrow-box--success");
      boss?.classList.add("character--hurt");
      setTimeout(() => {
        boss?.classList.remove("character--hurt");
      }, 800);
      playSound("sword");
      gameState.heroScore++;
    } else {
      currentArrowBox.classList.add("arrow-box--failed");
      hero?.classList.add("character--hurt");
      setTimeout(() => {
        hero?.classList.remove("character--hurt");
      }, 800);
      playSound("grunt");
      gameState.bossScore++;
    }

    gameState.step++;
    updateScore();
    checkGameEnd();
  };

  // Update score
  const updateScore = () => {
    console.log("SCORE:", gameState.heroScore, " / ", gameState.bossScore);
  };

  // Check if game has ended
  const checkGameEnd = () => {
    if (gameState.heroScore === 6) {
      alert("You win!");
    } else if (gameState.bossScore === 6) {
      alert("You lose!");
    }
  };

  // Start game
  const startGame = () => {
    const arrowBoxes = document.querySelectorAll(".game__arrow-box");
    arrowBoxes.forEach((arrowBox) => {
      arrowBox.classList.add("game__arrow-box--active");
    });
  };

  // Reset game
  const resetGame = () => {
    window.location.reload();
  };

  // Event listeners
  document.addEventListener("keydown", handleKeyPress);
  document
    .querySelector(".game__button--start")
    ?.addEventListener("click", startGame);
  document
    .querySelector(".game__button--reset")
    ?.addEventListener("click", resetGame);
</script>

<style>
  .game {
    position: absolute;
    bottom: 0;
    top: 0;
    left: 0;
    right: 0;
    margin: auto;
    padding: 64px 120px 32px 120px;
    overflow: hidden;
    width: 100%;
  }

  .game__Arrow-Container {
    position: relative;
    bottom: 0px;
    display: flex;
    gap: 1rem;
  }

  .game__battleground {
    display: flex;
    justify-content: space-between;
    flex-grow: 1;
  }

  :root {
    --game-arrow-gap: 200px;
    --game-arrow-width: 106px;
    --game-arrow-offset: 200px;
  }
  .game__arrow-box--1 {
    left: calc(var(--game-arrow-offset) + var(--game-arrow-width));
  }
  .game__arrow-box--2 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap)
    );
  }
  .game__arrow-box--3 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap) *
        2
    );
  }
  .game__arrow-box--4 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap) *
        3
    );
  }
  .game__arrow-box--5 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap) *
        4
    );
  }
  .game__arrow-box--6 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap) *
        5
    );
  }
  .game__arrow-box--7 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap) *
        6
    );
  }
  .game__arrow-box--8 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap) *
        7
    );
  }
  .game__arrow-box--9 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap) *
        8
    );
  }
  .game__arrow-box--10 {
    left: calc(
      var(--game-arrow-offset) + var(--game-arrow-width) + var(--game-arrow-gap) *
        9
    );
  }

  .game__arrow-box--active {
    transform: translateX(-2400px);
    transition: transform 20s linear;
  }
</style>
